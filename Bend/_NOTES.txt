
-------------------[  atomic segment changes ]----------------------------------------



I can create a special kind of atomic write-group that lets you make a set of changes that will all be written in the same transaction log packet. As a result, the whole write-group with either all apply, or not apply. I can't use this for user-transactions, because a user-transaction could write 200MB+ of data -- too much to fit in a log packet. However, segment pointer changes are boundable (max of N segments per merge, max bytes per key, etc.)

These changes also need to be atomically applied into the working segment with respect to the cursors. 

(1) A brute force way to do this would be to lock the working segment, invalidate all cursors, wait for confirmation that all cursors are reset, change the entries, and then unlock the working segment. Since this is entirely atomic, it could put the old segment blocks right onto the freelist in the AtomicWriteGroup.

(2) I have an idea about how to do this that doesn't require coordinating with the cursors... this is both faster and seems simpler to me. I already have a concept of "layers" of the memory working segment for checkpointing. I can cheaply add the AtomicWriteGroup to a new memory layer and "atomically" put it in place. Existing cursors might be running without this new memory layer, which is fine as long as those segments are not actually put on the free-list yet. New cursors will see the new memory layer. If it's important, once all "old" cursors are done, I can 'merge' the top-memory layer down into the next layer (they are just duplicates) and then drop the top memory layer. 

With (2), that leaves the question of how to get the freed segments onto the free-list ONLY AFTER they are no longer in use by any cursors. 

(a) I had already been considering a mechanism which would have the in-memory freelist manager keep track of the segments which are recorded as free but "still held" by live objects. A WeakRef trigger would notify the freelist when these objects were garbage collected so it could reallocate them safetly. If the server restarted, all cursors are reset anyhow, so these blocks are actually safe to reallocate.  

(b) In the past I had been considering doing snapshots that would potentially keep old segments around. This might justify a different way of trapping these records before they were actually added back onto the freelist. However, I've since changed my thinking, as I think these needs are probably better served by using attributes and letting merge progress  continue to keep things as merged as possible. 


-------------------[  speeding up text index ]----------------------------

search for [jeske neotonic] returned 89100 hits in 59.0393769s   
      (178483 productions, 89382 comparisons, 318401 entries scanned)

ideas how to improve this:

(1) make some new block format options that length-encode instead of escaping data.  That will minimally make it 2x faster, probably more like 8-10x. 

(2) prefix-key-removal outside block handler.... I want to make sortedsegment try to create blocks that have the same prefix, and thus don't need to know the prefix. This way, searches/scans within the block will only need to decode the unique-keyparts inside that block. They won't need to even touch the prefix keyparts which are all the same. For keys like "zindex/WORD/DOCID", this should make scanning about 6x faster, because it won't need to do decoding or object allocation for the "zindex/WORD" part for every hit, only the "DOCID". 

(3) eliminate deep virtual method call wind/unwind for every hit. Right now the bottom level produces a hit, and the top level decides if it is "big enough" for every hit. This is about 5 levels of virtual method calls. I can eliminate this by having search implement a "match spec" that it hands down into the iteration.. so the bottom level can just call the matcher to check entries. 
                             

-------------------[  field based record interface ]----------------------------

/* var rec = new Rec();
    * rec.prefix = "foo";
    * rec.word = bar
    * rec.docid = 5
    * rec.freq = 6
    * 
    * var rec = new Rec{
    *    prefix = "foo",
    *    word = "bar",
    *    docid = 5,
    *    freq = 6
    *    };
    *    
    * 
    * db.wordlist.setRec(rec)
    * 
    * struct WordHit {
    *   RecordKeyType_String prefix;
    *   RecordKeyType_String word;
    *   RecordKeyType_Long docid;
    *   RecordKeyType_Long freq;
    *   }
    *   
    * DbIdex WordHitIndex = db.wordlist.defineKey(WordHit, WordHit.prefix.Type,WordHit.word.Type,WordHit.docid.Type);
    *                                           
    * db.wordlist.defineKey("prefix/word/docid");
    * 
    *                      
    * void defineKey<T> where T:RecordKeyType (WordHit.Type, T[] parts)
    *                                                            
    */



-------------------[  random notes ]----------------------------------------------------


Solr + HBase + Avro = flexible searchable document store

http://www.javarants.com/2010/06/30/havrobase-a-searchable-evolvable-entity-store-on-top-of-hbase-and-solr/

doc generation

http://www.codeproject.com/KB/cs/csharpcommentinganddocs.aspx



-------------------[  cluster perf testing  ]---------------------------------------



http://hstack.org/hbase-performance-testing/


http://wiki.apache.org/hadoop/Hbase/10Minutes

http://www.mail-archive.com/cassandra-user@incubator.apache.org/msg02312.html

http://www.slideshare.net/schubertzhang/hbase-0200-performance-evaluation

http://nosql.mypopescu.com/post/734816227/nosql-benchmarks-and-performance-evaluations

http://www.hypertable.com/pub/perfeval/test1/

http://voltdb.com/blog/key-value-benchmarking

http://voltdb.com/content/how-voltdb-works

http://nosql.mypopescu.com/post/392868405/mongodb-durability-a-tradeoff-to-be-aware-of

https://github.com/ericflo/twissandra


-------------------[  random research ]-------------------------------------------------
*** Research Notes

nosql for .net blog

http://coderjournal.com/2010/03/cassandra-jump-start-for-the-windows-developer/


search:

solr - distributed lucene, is merged with lucene project now, static system, no elastic capability

http://lucene.apache.org/java/2_4_0/benchmarks.html

http://lucene.apache.org/solr/

katta - distribute search serving (not indexing) with lucene
hadoop lucene - mapreduce index build, works with katta, batch oriented, no realtime
lucene

discuss faceting
discuss shard direction

add consistent hot-records cache design

http://www.codeproject.com/KB/cs/mime_project.aspx?print=true


-------------------[  end user apps  ]-------------------------------------------

CMS:
  - wordpress
  - http://erlanginside.com/zotonic-destroys-wordpress-and-rethinks-the-cms-with-erlang-149
  - Drupal

Forum
  - PHPBB
  - Google Groups + Wiki

Wiki
  - Etherpad realtime + Wiki + WYSIWYG



-------------------[  sort orders ]---------------------------------------------

csharp string culture aware sorting:


http://msdn.microsoft.com/en-us/library/cc190529.aspx

http://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.aspx






http://groups.google.com/group/DotNetDevelopment/browse_thread/thread/9e25f876a251fd48

http://msdn.microsoft.com/en-us/library/aa176552(SQL.80).aspx

http://msdn.microsoft.com/en-us/library/aa258233(SQL.80).aspx

http://en.wikipedia.org/wiki/Code_page

'smart natural sorting' : 

http://www.interact-sw.co.uk/iangblog/2007/12/13/natural-sorting

http://www.codinghorror.com/blog/2007/12/sorting-for-humans-natural-sort-order.html

http://www.davekoelle.com/alphanum.html

http://msdn.microsoft.com/en-us/library/system.string.aspx




Thread.CurrentThread.CurrentCulture and
Thread.Thread.CurrentThread.CurrentUICulture?




-------------------[  visual studio ]---------------------------------------------

http://blogs.msdn.com/b/vcblog/archive/2010/04/21/quick-help-on-vs2010-custom-build-rule.aspx


Q: How can we make a 





More design notes at:

https://docs.google.com/Doc?docid=0AZBsc776AuokZGdndnFmZm5fNjNneDRjYzZmaw&hl=en


Visual Studio

Custom Tools

http://www.codeproject.com/KB/dotnet/Custom_Tool_Registration.aspx
http://msdn.microsoft.com/en-us/library/aa301694(VS.71).aspx

http://stackoverflow.com/questions/39712/visual-studio-2005-2008-how-can-you-share-force-all-developers-to-use-the-same-f

Debug Levels and Tracing

http://www.codeguru.com/csharp/.net/net_debugging/tracing/article.php/c5919
